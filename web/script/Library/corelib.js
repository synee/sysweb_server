// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var Applications, Class, Environment, Events, Library, Memory, User, fs, init, _Sys, _extend;
    _extend = function(child, parent, props, staticProps) {
      var key, value, _ref, _ref1, _ref2;
      if (props == null) {
        props = {};
      }
      if (staticProps == null) {
        staticProps = {};
      }
      child.prototype = Object.create(parent.prototype);
      _ref = Object.create(props);
      for (key in _ref) {
        value = _ref[key];
        child.prototype[key] = value;
      }
      _ref1 = Object.create(parent);
      for (key in _ref1) {
        value = _ref1[key];
        child[key] = value;
      }
      _ref2 = Object.create(staticProps);
      for (key in _ref2) {
        value = _ref2[key];
        child[key] = value;
      }
      child.prototype._super = parent.prototype;
      return child;
    };
    Class = function() {
      this.constructor(arguments);
      return this;
    };
    Class.prototype.constructor = function() {
      return this.initialize.apply(this, arguments);
    };
    Class.prototype.initialize = function() {};
    Class.extend = function(props, staticProps) {
      var self, _Class;
      if (props == null) {
        props = {};
      }
      if (staticProps == null) {
        staticProps = {};
      }
      self = this;
      _Class = function() {
        return self.prototype.constructor.apply(this, arguments);
      };
      _Class = _extend(_Class, this, props, staticProps);
      _Class.extend = function() {
        return self.extend.apply(this, arguments);
      };
      return _Class;
    };
    Events = window.Events = function() {
      return this.constructor(arguments);
    };
    Events = _extend(Events, Class, {
      on: function(signal, callback, ctx, evts) {
        var _listenerSequence;
        if (ctx == null) {
          ctx = this;
        }
        if (evts == null) {
          evts = (this._events[signal] = this._events[signal] || {});
        }
        if (!callback) {
          return;
        }
        _listenerSequence = callback._listenerSequence = callback._listenerSequence || (new Date().getTime() + Math.random());
        return evts[_listenerSequence] = {
          callback: callback,
          ctx: ctx
        };
      },
      unon: function(signal, callback) {
        if (this._events[signal] && this._events[signal][callback._listenerSequence]) {
          delete this._events[signal][callback._listenerSequence];
        }
        if (this._onceevents[signal] && this._onceevents[signal][callback._listenerSequence]) {
          return delete this._onceevents[signal][callback._listenerSequence];
        }
      },
      once: function(signal, callback, ctx, evts) {
        var _listenerSequence;
        if (ctx == null) {
          ctx = this;
        }
        if (evts == null) {
          evts = (this._onceevents[signal] = this._onceevents[signal] || {});
        }
        if (!callback) {
          return;
        }
        _listenerSequence = callback._listenerSequence = callback._listenerSequence || (new Date().getTime() + Math.random());
        return evts[_listenerSequence] = {
          callback: callback,
          ctx: ctx
        };
      },
      trigger: function(signal, args) {
        var evt, evtSeq, evts, self, _fn, _results;
        if (args == null) {
          args = [];
        }
        self = this;
        if (evts = this._onceevents[signal]) {
          _fn = function() {
            delete evts[evtSeq];
            return setTimeout((function() {
              if (evt && evt.callback) {
                return evt.callback.apply(evt.ctx, args);
              }
            }), 1);
          };
          for (evtSeq in evts) {
            evt = evts[evtSeq];
            _fn();
          }
        }
        if (evts = this._events[signal]) {
          _results = [];
          for (evtSeq in evts) {
            evt = evts[evtSeq];
            _results.push(setTimeout((function() {
              if (evt && evt.callback) {
                return evt.callback.apply(evt.ctx, args);
              }
            }), 1));
          }
          return _results;
        }
      }
    });
    Events.prototype.constructor = function() {
      this._events = {};
      this._onceevents = {};
      this.initialize.apply(this, arguments);
      return this;
    };
    _Sys = Events.extend({
      initialize: function() {}
    });
    window.Sysweb = window.Sysweb || (function() {
      return new _Sys();
    })();
    fs = Sysweb.fs = (function() {
      var _Fs;
      _Fs = _Sys.extend({
        cd: function(path) {
          return $.get("/fs/cd", {
            path: path
          });
        },
        ls: function(path) {
          var hanler, jqx;
          hanler = {
            done: function() {}
          };
          return jqx = $.get("/fs/ls", {
            path: path
          }).done(function(result) {
            return console.log(result);
          });
        },
        pwd: function() {},
        isDir: function(path) {
          var jqx;
          jqx = $.get("/fs/isDir", {
            path: path
          });
          return jqx.done(function(result) {
            return console.log(result);
          });
        },
        isFile: function(path) {
          return $.get("/fs/isFile", {
            path: path
          });
        },
        touch: function(path) {
          return $.post("/fs/touch", {
            path: path
          });
        },
        mkdir: function(path) {
          return $.post("/fs/mkdir", {
            path: path
          });
        },
        rm: function(path) {
          return $.post("/fs/rm", {
            path: path
          });
        },
        cp: function(source, dest) {
          return $.post("/fs/cp", {
            source: source,
            dest: dest
          });
        },
        mv: function(source, dest) {
          return $.post("/fs/mv", {
            source: source,
            dest: dest
          });
        },
        head: function(path, start, stop) {
          return $.post("/fs/head", {
            path: path,
            start: start,
            stop: stop
          });
        },
        tail: function(path, start, stop) {
          return $.post("/fs/tail", {
            path: path,
            start: start,
            stop: stop
          });
        },
        stat: function(path) {
          return $.get("/fs/stat", {
            path: path
          });
        },
        cache: function(path) {},
        read: function(path) {
          return $.post("/fs/read", {
            path: path
          });
        },
        write: function(path, text) {
          return $.post("/fs/write", {
            path: path,
            text: text
          });
        },
        append: function(path, text) {
          return $.post("/fs/append", {
            path: path,
            text: text
          });
        },
        echo: function(path, text) {
          return $.post("/fs/echo", {
            path: path,
            text: text
          });
        },
        head: function(path) {
          return $.get("/fs/head", {
            path: path
          });
        }
      });
      return new _Fs();
    })();
    Memory = Sysweb.Memory = (function() {
      var _Memory;
      _Memory = _Sys.extend({});
      return new _Memory();
    })();
    Library = Sysweb.Library = (function() {
      var _Library;
      _Library = _Sys.extend({
        initialize: function() {
          return this._libs = {};
        },
        addLib: function(name, lib) {
          if (!this._libs[name]) {
            this._libs[name] = lib;
          }
          return this;
        },
        getLib: function(name) {
          return this._libs[name];
        },
        removeLib: function(name) {
          delete this._libs[name];
          return this;
        }
      });
      return new _Library();
    })();
    Environment = window.Sysweb.Environment = (function() {
      var _Environment;
      _Environment = _Sys.extend({
        initialize: function() {
          return this._envs = {};
        },
        set: function(name, value) {
          return this._envs[name] = value;
        },
        get: function(name) {
          return this._envs[name];
        },
        addBoot: function(tag, path, attr, attrs) {
          if (attrs == null) {
            attrs = '';
          }
          return $.post("/boot", {
            tag: tag,
            path: path,
            attr: attr,
            attrs: attrs
          });
        }
      });
      return new _Environment();
    })();
    Applications = window.Sysweb.Applications = (function() {
      var _Apps;
      _Apps = _Sys.extend({
        AppClass: Events.extend({}),
        initialize: function() {
          return this._apps = {};
        },
        set: function(name, value) {
          if (this._apps[name]) {
            return false;
          }
          return this._apps[name] = value;
        },
        get: function(name) {
          return this._apps[name];
        }
      });
      return new _Apps();
    })();
    User = window.Sysweb.User = (function() {
      var _Event;
      _Event = _Sys.extend({
        initialize: function() {
          var self;
          self = this;
          this.fetch();
          return $(document).on("ajaxerror", function(docevent, event, request, settings) {
            if (request.status === 403) {
              return self.trigger("forbidden", [event, request, settings]);
            }
          });
        },
        login: function(username, password) {
          var self;
          self = this;
          return $.post("/login", {
            username: username,
            password: password
          }).done(function(result) {
            if (!result.error && result.user) {
              self.currentUser = result.user;
              return self.trigger("logined");
            } else {
              return self.trigger("loginfailed");
            }
          });
        },
        register: function(username, password) {
          var self;
          self = this;
          return $.post("/register", {
            username: username,
            password: password
          }).done(function(result) {
            if (!result.error && result.user) {
              self.currentUser = result.user;
              return self.trigger("logined");
            } else {
              return self.trigger("registerfailed");
            }
          });
        },
        fetch: function() {
          var self;
          self = this;
          return $.post("/user/current").done(function(result) {
            if (!result.error && result.user) {
              self.currentUser = result.user;
              return self.trigger("logined");
            }
          });
        }
      });
      return new _Event();
    })();
    init = window.Sysweb.init = function() {};
    init.addBoot = function(tag, path, attr, attrs) {
      if (attrs == null) {
        attrs = '';
      }
      return $.post("/boot/add", {
        tag: tag,
        path: path,
        attr: attr,
        attrs: attrs
      });
    };
    return init.removeBoot = function(path) {
      return $.post("/boot/remve", {
        path: path
      });
    };
  });

}).call(this);

/*
//@ sourceMappingURL=corelib.map
*/
